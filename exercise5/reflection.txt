### Part 5: Reflecting

You do not have to answer every question in turn, as long as you address the contents somewhere.

Condition variables, Java monitors, and Ada protected objects are quite similar in what they do (temporarily yield execution so some other task can unblock us).
But in what ways do these mechanisms differ?

Ans: The three mechanisms differ in abstraction level. Use of condition variables requires manual a manual check of conitions as well as correct wait() logic, while in Ada this is handled for you using guards.
Java monitors are higher level than condition variables. For example in Java monitors each object has a monitor that handles cond variables as well as mutex, while when using condition variables this has to be done explicitly.


Bugs in this kind of low-level synchronization can be hard to spot.
  - Which solutions are you most confident are correct?
  - Why, and what does this say about code quality?

Ans: I am most confident that the solution using Ada protected objects is correct. This is due to the fact that Ada has build in handeling of shared variables, using guards to prevent race conditions.

We operated only with two priority levels here, but it makes sense for this "kind" of priority resource to support more priorities.
  - How would you extend these solutions to N priorities? Is it even possible to do this elegantly?
  - What (if anything) does that say about code quality

Ans: 

In D's standard library, `getValue` for semaphores is not even exposed (probably because it is not portable – Windows semaphores don't have `getValue`, though you could hack it together with `ReleaseSemaphore()` and `WaitForSingleObject()`).
  - A leading question: Is using `getValue` ever appropriate?
  - Explain your intuition: What is it that makes `getValue` so dubious?

Ans: 

Which one(s) of these different mechanisms do you prefer, both for this specific task and in general? (This is a matter of taste – there are no "right" answers here)

Ans: